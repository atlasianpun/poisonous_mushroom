{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.10.13","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"},"kaggle":{"accelerator":"none","dataSources":[{"sourceId":76727,"databundleVersionId":9045607,"sourceType":"competition"}],"dockerImageVersionId":30746,"isInternetEnabled":true,"language":"python","sourceType":"notebook","isGpuEnabled":false}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# Basic Packages\nimport numpy as np  # linear algebra\nimport pandas as pd  # data processing, CSV file I/O (e.g. pd.read_csv)\nimport gc\nimport os\nimport warnings\nimport ydata_profiling as dp\n\n# Visualization Packages\nimport matplotlib.pyplot as plt\nimport seaborn as sns\nimport plotly.express as px\nfrom statsmodels.graphics.mosaicplot import mosaic\n\n# Hyperparameter Optimization\nfrom hyperopt import fmin, tpe, hp, Trials, STATUS_OK\nfrom hyperopt.pyll.base import scope\n\n# Scikit-learn Packages\nfrom sklearn.model_selection import train_test_split, GridSearchCV, KFold, StratifiedKFold, RepeatedStratifiedKFold\nfrom sklearn.impute import SimpleImputer\nfrom sklearn.preprocessing import StandardScaler, LabelEncoder, OrdinalEncoder, FunctionTransformer\nfrom sklearn.decomposition import PCA\nfrom sklearn.cluster import KMeans\nfrom sklearn.metrics import r2_score, roc_auc_score, accuracy_score, matthews_corrcoef, make_scorer, confusion_matrix\nfrom sklearn.pipeline import Pipeline\nfrom sklearn.compose import ColumnTransformer\nfrom sklearn.model_selection import cross_val_score\n\n\n# Machine Learning Models\nfrom catboost import CatBoostClassifier\nfrom sklearn.linear_model import LogisticRegression, RidgeClassifier, Lasso\nfrom sklearn.tree import DecisionTreeClassifier\nfrom sklearn.ensemble import AdaBoostClassifier, RandomForestClassifier, IsolationForest\nfrom sklearn.svm import SVC\nfrom sklearn.neural_network import MLPClassifier\nimport lightgbm as lgb\nimport xgboost as xgb\nfrom xgboost import XGBClassifier\n\nwarnings.filterwarnings('ignore')\ngc.enable()\n%matplotlib inline\n\n#Setting up display options for pandas dataframe\npd.set_option('display.max_rows', None)\npd.set_option('display.max_columns', None)\npd.set_option('display.width', None)\npd.set_option('display.max_colwidth', None)","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2024-08-19T17:45:52.407841Z","iopub.execute_input":"2024-08-19T17:45:52.408341Z","iopub.status.idle":"2024-08-19T17:45:52.431564Z","shell.execute_reply.started":"2024-08-19T17:45:52.408292Z","shell.execute_reply":"2024-08-19T17:45:52.430430Z"},"trusted":true},"execution_count":18,"outputs":[]},{"cell_type":"code","source":"palette = sns.color_palette(\"Spectral\", n_colors=13) \nsns.set_theme(context='notebook', palette=palette, style='darkgrid')\nrs = 101","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:45:52.434449Z","iopub.execute_input":"2024-08-19T17:45:52.434962Z","iopub.status.idle":"2024-08-19T17:45:52.452869Z","shell.execute_reply.started":"2024-08-19T17:45:52.434919Z","shell.execute_reply":"2024-08-19T17:45:52.450913Z"},"trusted":true},"execution_count":19,"outputs":[]},{"cell_type":"code","source":"# Define a function to identify and replace infrequent categories\ndef replace_infrequent_categories(df, column, threshold=70):\n    value_counts = df[column].value_counts()\n    infrequent = value_counts[value_counts <= threshold].index\n    df[column] = df[column].apply(lambda x: \"Unknown\" if x in infrequent else x)\n    return df","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:45:52.454975Z","iopub.execute_input":"2024-08-19T17:45:52.455514Z","iopub.status.idle":"2024-08-19T17:45:52.471073Z","shell.execute_reply.started":"2024-08-19T17:45:52.455475Z","shell.execute_reply":"2024-08-19T17:45:52.468890Z"},"trusted":true},"execution_count":20,"outputs":[]},{"cell_type":"code","source":"df_train = pd.read_csv('/kaggle/input/playground-series-s4e8/train.csv')\ndf_test  = pd.read_csv('/kaggle/input/playground-series-s4e8/test.csv')","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:45:52.479880Z","iopub.execute_input":"2024-08-19T17:45:52.480436Z","iopub.status.idle":"2024-08-19T17:46:12.332301Z","shell.execute_reply.started":"2024-08-19T17:45:52.480386Z","shell.execute_reply":"2024-08-19T17:46:12.330524Z"},"trusted":true},"execution_count":21,"outputs":[]},{"cell_type":"code","source":"# Rename the column 'Response' to 'Target' in the DataFrame df_test\ndf_train.rename(columns={'class': 'Target'}, inplace=True)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:46:12.336505Z","iopub.execute_input":"2024-08-19T17:46:12.337104Z","iopub.status.idle":"2024-08-19T17:46:12.344820Z","shell.execute_reply.started":"2024-08-19T17:46:12.337057Z","shell.execute_reply":"2024-08-19T17:46:12.343249Z"},"trusted":true},"execution_count":22,"outputs":[]},{"cell_type":"code","source":"# Create copies of the original DataFrames\ndf_train_cleaned = df_train.copy()\ndf_test_cleaned = df_test.copy()\n\n# Drop 'id' column\ndf_train_cleaned = df_train_cleaned.drop(['id'], axis=1)\n\n# Define the target column\ntarget_column = 'Target'\n\n# Select categorical columns, excluding the target column\ncategorical_columns = df_train_cleaned.select_dtypes(include=['object']).columns.drop(target_column)\n\n# Select numerical columns, excluding the target column if it's numerical\nnumerical_columns = df_train_cleaned.select_dtypes(exclude=['object']).columns.drop(target_column, errors='ignore')\n\n# Print out the lists of columns\nprint(\"Target Column:\", target_column)\nprint(\"\\nCategorical Columns:\", categorical_columns.tolist())\nprint(\"\\nNumerical Columns:\", numerical_columns.tolist())","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:46:12.346678Z","iopub.execute_input":"2024-08-19T17:46:12.347144Z","iopub.status.idle":"2024-08-19T17:46:15.056605Z","shell.execute_reply.started":"2024-08-19T17:46:12.347107Z","shell.execute_reply":"2024-08-19T17:46:15.054730Z"},"trusted":true},"execution_count":23,"outputs":[{"name":"stdout","text":"Target Column: Target\n\nCategorical Columns: ['cap-shape', 'cap-surface', 'cap-color', 'does-bruise-or-bleed', 'gill-attachment', 'gill-spacing', 'gill-color', 'stem-root', 'stem-surface', 'stem-color', 'veil-type', 'veil-color', 'has-ring', 'ring-type', 'spore-print-color', 'habitat', 'season']\n\nNumerical Columns: ['cap-diameter', 'stem-height', 'stem-width']\n","output_type":"stream"}]},{"cell_type":"code","source":"# Handle invalid values and infrequent categories for all categorical columns\nfor col in categorical_columns:\n    df_train_cleaned = replace_infrequent_categories(df_train_cleaned, col)\n    df_test_cleaned = replace_infrequent_categories(df_test_cleaned, col)\n","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:46:15.059169Z","iopub.execute_input":"2024-08-19T17:46:15.059750Z","iopub.status.idle":"2024-08-19T17:50:24.280291Z","shell.execute_reply.started":"2024-08-19T17:46:15.059702Z","shell.execute_reply":"2024-08-19T17:50:24.278766Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"print(\"The skewness of columns:\")\nprint(df_train_cleaned[numerical_columns].skew())","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:50:24.282071Z","iopub.execute_input":"2024-08-19T17:50:24.282609Z","iopub.status.idle":"2024-08-19T17:50:24.580903Z","shell.execute_reply.started":"2024-08-19T17:50:24.282562Z","shell.execute_reply":"2024-08-19T17:50:24.579447Z"},"trusted":true},"execution_count":25,"outputs":[{"name":"stdout","text":"The skewness of columns:\ncap-diameter    3.972609\nstem-height     1.926682\nstem-width      1.235427\ndtype: float64\n","output_type":"stream"}]},{"cell_type":"code","source":"# Compute medians for numerical columns in the training set\nmedians = df_train_cleaned[numerical_columns].median()\n\n# Fill missing values in the training and testing sets\ndf_train_cleaned[numerical_columns] = df_train_cleaned[numerical_columns].fillna(medians)\ndf_test_cleaned[numerical_columns] = df_test_cleaned[numerical_columns].fillna(medians)\n\nprint(\"As the skewness of all numerical columns is more than 1, we used the median value to fill in any missing values.\")","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:50:24.582604Z","iopub.execute_input":"2024-08-19T17:50:24.583122Z","iopub.status.idle":"2024-08-19T17:50:25.107092Z","shell.execute_reply.started":"2024-08-19T17:50:24.583088Z","shell.execute_reply":"2024-08-19T17:50:25.105930Z"},"trusted":true},"execution_count":26,"outputs":[{"name":"stdout","text":"As the skewness of all numerical columns is more than 1, we used the median value to fill in any missing values.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Impute any missing values with 'Unknown'\ndf_train_cleaned = df_train_cleaned.fillna(\"Unknown\")\ndf_test_cleaned = df_test_cleaned.fillna(\"Unknown\")","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:50:25.108927Z","iopub.execute_input":"2024-08-19T17:50:25.109244Z","iopub.status.idle":"2024-08-19T17:50:35.990701Z","shell.execute_reply.started":"2024-08-19T17:50:25.109216Z","shell.execute_reply":"2024-08-19T17:50:35.989399Z"},"trusted":true},"execution_count":27,"outputs":[]},{"cell_type":"code","source":"print(\"There are {} duplicates in train dataset.\".format(df_train_cleaned.duplicated().sum()))\nprint(\"There are {} duplicates in test dataset.\".format(df_test_cleaned.duplicated().sum()))","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:50:35.992267Z","iopub.execute_input":"2024-08-19T17:50:35.992764Z","iopub.status.idle":"2024-08-19T17:50:45.681577Z","shell.execute_reply.started":"2024-08-19T17:50:35.992722Z","shell.execute_reply":"2024-08-19T17:50:45.680301Z"},"trusted":true},"execution_count":28,"outputs":[{"name":"stdout","text":"There are 2 duplicates in train dataset.\nThere are 0 duplicates in test dataset.\n","output_type":"stream"}]},{"cell_type":"code","source":"# Initialize LabelEncoder\nlabel_encoder = LabelEncoder()\n\n# Fit and transform the target variable\ntrain_encoded_target = label_encoder.fit_transform(df_train_cleaned[['Target']])\n\n# Convert categorical columns to 'category' dtype \ndf_train_cleaned[categorical_columns] = df_train_cleaned[categorical_columns].astype('category')\ndf_test_cleaned[categorical_columns] = df_test_cleaned[categorical_columns].astype('category')\n\n# Define the numerical pipeline\nnumerical_pipeline = Pipeline(steps=[\n    ('scaler', StandardScaler()),\n    ('convert_to_float32', FunctionTransformer(lambda x: x.astype(np.float32)))\n])\n\n# Define the categorical pipeline\ncategorical_pipeline = Pipeline(steps=[\n    ('ordinal', OrdinalEncoder(dtype=np.int32, handle_unknown='use_encoded_value', unknown_value=-1))\n])\n\n# Combine both numerical and categorical pipelines\npreprocessor = ColumnTransformer(\n    transformers=[\n        ('num', numerical_pipeline, numerical_columns),\n        ('cat', categorical_pipeline, categorical_columns)\n    ]\n)\n\n# Apply the transformations using the pipeline\ndf_train_preprocessed = preprocessor.fit_transform(df_train_cleaned)\ndf_test_preprocessed = preprocessor.transform(df_test_cleaned)","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:50:45.683140Z","iopub.execute_input":"2024-08-19T17:50:45.683560Z","iopub.status.idle":"2024-08-19T17:51:25.566648Z","shell.execute_reply.started":"2024-08-19T17:50:45.683523Z","shell.execute_reply":"2024-08-19T17:51:25.565515Z"},"trusted":true},"execution_count":29,"outputs":[]},{"cell_type":"code","source":"# Apply Isolation Forest for outlier detection\nisolation_forest = IsolationForest(contamination=0.02, random_state=rs)\noutlier_labels = isolation_forest.fit_predict(df_train_preprocessed)\n\n# Filter out outliers\nnon_outliers_mask = outlier_labels != -1\ndf_train_preprocessed = df_train_preprocessed[non_outliers_mask]\ntrain_encoded_target = train_encoded_target[non_outliers_mask]","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:51:25.568368Z","iopub.execute_input":"2024-08-19T17:51:25.568758Z","iopub.status.idle":"2024-08-19T17:54:56.255594Z","shell.execute_reply.started":"2024-08-19T17:51:25.568726Z","shell.execute_reply":"2024-08-19T17:54:56.254319Z"},"trusted":true},"execution_count":30,"outputs":[]},{"cell_type":"code","source":"# Separate features (X) and target variable (y)\nX = df_train_preprocessed\ny = train_encoded_target\n\n# Split the data into training and testing sets\nX_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=rs)","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:54:56.260934Z","iopub.execute_input":"2024-08-19T17:54:56.261487Z","iopub.status.idle":"2024-08-19T17:54:56.905942Z","shell.execute_reply.started":"2024-08-19T17:54:56.261448Z","shell.execute_reply":"2024-08-19T17:54:56.904624Z"},"trusted":true},"execution_count":31,"outputs":[]},{"cell_type":"code","source":"# Step 1: Initialize the XGBClassifier\nxgb_model = XGBClassifier(\n    n_estimators=100,  # Default number of boosting rounds\n    use_label_encoder=False,  # Disable use of label encoder\n    eval_metric='logloss'  # Suitable for binary classification\n)\n# Step 2: Fit the model to your training data\nxgb_model.fit(X_train, y_train)\n\n# Step 3: Make predictions on the test set\ny_pred = xgb_model.predict(X_test)\n\n# Step 4: Evaluate the model\naccuracy = accuracy_score(y_test, y_pred)\nmcc = matthews_corrcoef(y_test, y_pred)\nconf_matrix = confusion_matrix(y_test, y_pred)\n\nprint(\"Accuracy on Test Set:\", accuracy)\nprint(\"MCC on Test Set:\", mcc)\nprint(\"Confusion Matrix:\\n\", conf_matrix)","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:54:56.907491Z","iopub.execute_input":"2024-08-19T17:54:56.907956Z","iopub.status.idle":"2024-08-19T17:55:19.144144Z","shell.execute_reply.started":"2024-08-19T17:54:56.907916Z","shell.execute_reply":"2024-08-19T17:55:19.142443Z"},"trusted":true},"execution_count":32,"outputs":[{"name":"stdout","text":"Accuracy on Test Set: 0.9912918791862818\nMCC on Test Set: 0.9824357688699373\nConfusion Matrix:\n [[274429   2253]\n [  3067 331175]]\n","output_type":"stream"}]},{"cell_type":"code","source":"test_preds = xgb_model.predict(df_test_preprocessed)\ntest_preds = label_encoder.inverse_transform(test_preds)","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:55:19.146733Z","iopub.execute_input":"2024-08-19T17:55:19.147537Z","iopub.status.idle":"2024-08-19T17:55:21.350756Z","shell.execute_reply.started":"2024-08-19T17:55:19.147475Z","shell.execute_reply":"2024-08-19T17:55:21.349644Z"},"trusted":true},"execution_count":33,"outputs":[]},{"cell_type":"code","source":"output = pd.DataFrame({'id': df_test['id'],\n                       'class': test_preds})\n\noutput.to_csv('submission.csv', index=False)\n\noutput.head()","metadata":{"execution":{"iopub.status.busy":"2024-08-19T17:55:21.352106Z","iopub.execute_input":"2024-08-19T17:55:21.352461Z","iopub.status.idle":"2024-08-19T17:55:24.454119Z","shell.execute_reply.started":"2024-08-19T17:55:21.352432Z","shell.execute_reply":"2024-08-19T17:55:24.452635Z"},"trusted":true},"execution_count":34,"outputs":[{"execution_count":34,"output_type":"execute_result","data":{"text/plain":"        id class\n0  3116945     e\n1  3116946     p\n2  3116947     p\n3  3116948     p\n4  3116949     e","text/html":"<div>\n<style scoped>\n    .dataframe tbody tr th:only-of-type {\n        vertical-align: middle;\n    }\n\n    .dataframe tbody tr th {\n        vertical-align: top;\n    }\n\n    .dataframe thead th {\n        text-align: right;\n    }\n</style>\n<table border=\"1\" class=\"dataframe\">\n  <thead>\n    <tr style=\"text-align: right;\">\n      <th></th>\n      <th>id</th>\n      <th>class</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr>\n      <th>0</th>\n      <td>3116945</td>\n      <td>e</td>\n    </tr>\n    <tr>\n      <th>1</th>\n      <td>3116946</td>\n      <td>p</td>\n    </tr>\n    <tr>\n      <th>2</th>\n      <td>3116947</td>\n      <td>p</td>\n    </tr>\n    <tr>\n      <th>3</th>\n      <td>3116948</td>\n      <td>p</td>\n    </tr>\n    <tr>\n      <th>4</th>\n      <td>3116949</td>\n      <td>e</td>\n    </tr>\n  </tbody>\n</table>\n</div>"},"metadata":{}}]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}